package com.wildfire.LeetCode75.PriorityQueue;


import java.util.*;

/*** Amazon Web Services has n servers where the ith server's vulnerability score is vulnerability[i].
 * A client wants to deploy their application on a group of m contiguous servers.
 * The vulnerability of the group is defined as the kth minimum vulnerability among the chosen servers.
 * Find the vulnerability of each possible group of m contiguous servers the client can choose.

 Example: k = 2, m = 3,
 vulnerability = [1,3,2,1]
 There are 2 contiguous groups of m = 3 servers: [1,3,2] and [3,2,1]
 The k = 2nd lowest vulnerability in each group is 2
 Return the answer for each group in order [2,2]

 findkthminimumvulnerability has k, m, and vulnerability[n] as parameters and returns int(n-m+1):
 the ith element represents the kth minimum vulnerability among the vulnerabilities of all the servers in the ith contiguous group

 Example 2:
 k = 3, m = 4, vulnerability = [4,2,3,1,1]
 Answer: 3 2
 The first group of servers is [4,2,3,1] or [1,2,3,4] when sorted. The 3rd minimum vulnerability is 3
 The second group is [2,3,1,1] or [1,1,2,3] when sorted. The 3rd minimum vulnerability is 2
 Hence, the answer is 3 2 ***/
public class AmazonKthVulnerabilityDeployment {
    public static void main(String[] args) {
        int k = 2, m = 3;
        List<Integer> vulnerability = new ArrayList<>(Arrays.asList(1, 3, 2, 1));
        System.out.println(findKthMinimumVulnerability(k, m, vulnerability)); // Output: [2, 2]

        int k2 = 3, m2 = 4;
        List<Integer> vulnerability2 = new ArrayList<>(Arrays.asList(4, 2, 3, 1, 1));
        System.out.println(findKthMinimumVulnerability(k2, m2, vulnerability2)); // Output: [3, 2]
    }

    private static List<Integer> findKthMinimumVulnerability(int k, int m, List<Integer> vulnerability) {
        int len = vulnerability.size();
        List<Integer> result = new ArrayList<>();
        // initialize the min heap to store the k smallest elements
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(m, Comparator.naturalOrder());

        // initialize the sliding window
        for(int i = 0; i < m; i++) {
            minHeap.add(vulnerability.get(i));
        }
        //Create a list to sort the heap elements and get the kth smallest element
        List<Integer> heapElements = new ArrayList<>(minHeap);
        Collections.sort(heapElements);
        result.add(heapElements.get(k-1));

        // now use the sliding window across the array
        for(int i = m; i < len; i++) {
            minHeap.remove(vulnerability.get(i-m));
            minHeap.add(vulnerability.get(i));

            heapElements = new ArrayList<>(minHeap);
            Collections.sort(heapElements);
            result.add(heapElements.get(k-1));
        }
        return result;
    }

}
